# # docker-compose.yml - ÏàòÏ†ïÎêú Î≤ÑÏ†Ñ
# version: '3.8'

# services:
#   backend:
#     build: ./backend
#     ports:
#       - "8100:8000"
#     environment:
#       - OPENAI_API_KEY=${OPENAI_API_KEY}
#       - MEM0_API_KEY=${MEM0_API_KEY}
#       - REDIS_URL=redis://redis:6380
#       - CHROMA_HOST=chroma
#       - CHROMA_PORT=8001
#       - NEO4J_URI=neo4j://neo4j:7687
#       - NEO4J_USER=neo4j
#       - NEO4J_PASSWORD=testpassword
#     depends_on:
#       - redis
#       - chroma
#       - neo4j
#     volumes:
#       - ./backend:/app
#     restart: unless-stopped
#     networks:
#       - agent-network

#   frontend:
#     build: ./frontend
#     ports:
#       - "8501:8501"
#     environment:
#       - BACKEND_URL=http://backend:8100
#     depends_on:
#       - backend
#     volumes:
#       - ./frontend:/app
#     restart: unless-stopped
#     networks:
#       - agent-network

#   redis:
#     image: redis:7-alpine
#     ports:
#       - "6380:6379"
#     command: redis-server --appendonly yes
#     volumes:
#       - redis_data:/data
#     networks:
#       - agent-network

#   chroma:
#     image: chromadb/chroma:latest
#     ports:
#       - "8001:8000"
#     volumes:
#       - chroma_data:/chroma/chroma
#     networks:
#       - agent-network

#   neo4j:
#     image: neo4j:5
#     ports:
#       - "7474:7474"
#       - "7687:7687"
#     environment:
#       - NEO4J_AUTH=neo4j/testpassword
#       - NEO4J_PLUGINS=["apoc"]
#     volumes:
#       - neo4j_data:/data
#     networks:
#       - agent-network

#   # Î™®ÎãàÌÑ∞ÎßÅ ÏÑúÎπÑÏä§Îì§
#   prometheus:
#     image: prom/prometheus:v2.45.0
#     container_name: prometheus
#     ports:
#       - "9090:9090"
#     volumes:
#       - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
#       - ./monitoring/rules:/etc/prometheus/rules:ro
#       - prometheus_data:/prometheus
#     command:
#       - '--config.file=/etc/prometheus/prometheus.yml'
#       - '--storage.tsdb.path=/prometheus'
#       - '--web.console.libraries=/etc/prometheus/console_libraries'
#       - '--web.console.templates=/etc/prometheus/consoles'
#       - '--storage.tsdb.retention.time=15d'
#       - '--storage.tsdb.retention.size=10GB'
#       - '--web.enable-lifecycle'
#       - '--web.enable-admin-api'
#       - '--log.level=info'
#     networks:
#       - agent-network
#     restart: unless-stopped
#     depends_on:
#       - backend
#     healthcheck:
#       test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
#       interval: 30s
#       timeout: 10s
#       retries: 3
#       start_period: 40s

#   # Grafana ÎåÄÏãúÎ≥¥Îìú
#   grafana:
#     image: grafana/grafana:10.0.0
#     container_name: grafana
#     ports:
#       - "3000:3000"
#     volumes:
#       - grafana_data:/var/lib/grafana
#       - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
#     environment:
#       - GF_SECURITY_ADMIN_PASSWORD=admin
#       - GF_USERS_ALLOW_SIGN_UP=false
#     networks:
#       - agent-network
#     restart: unless-stopped
#     depends_on:
#       - prometheus

#   # Node Exporter (ÏãúÏä§ÌÖú Î©îÌä∏Î¶≠)
#   node-exporter:
#     image: prom/node-exporter:v1.6.0
#     container_name: node-exporter
#     ports:
#       - "9100:9100"
#     volumes:
#       - /proc:/host/proc:ro
#       - /sys:/host/sys:ro
#       - /:/rootfs:ro
#     command:
#       - '--path.procfs=/host/proc'
#       - '--path.sysfs=/host/sys'
#       - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
#     networks:
#       - agent-network
#     restart: unless-stopped

#   # cAdvisor (Ïª®ÌÖåÏù¥ÎÑà Î©îÌä∏Î¶≠)
#   cadvisor:
#     image: gcr.io/cadvisor/cadvisor:v0.47.0
#     container_name: cadvisor
#     ports:
#       - "8080:8080"
#     volumes:
#       - /:/rootfs:ro
#       - /var/run:/var/run:rw
#       - /sys:/sys:ro
#       - /var/lib/docker:/var/lib/docker:ro
#       - /dev/disk:/dev/disk:ro
#     networks:
#       - agent-network
#     restart: unless-stopped
#     privileged: true
#     devices:
#       - /dev/kmsg

# volumes:
#   redis_data:
#   chroma_data:
#   neo4j_data:
#   prometheus_data:
#   grafana_data:

# networks:
#   agent-network:
#     driver: bridge
# docker-compose.yml - Frontend ÌôòÍ≤ΩÎ≥ÄÏàò ÏàòÏ†ï

version: '3.8'

services:
  backend:
    build: ./backend
    ports:
      - "8100:8000"  # Ïô∏Î∂Ä:ÎÇ¥Î∂Ä Ìè¨Ìä∏ Îß§Ìïë
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MEM0_API_KEY=${MEM0_API_KEY}
      - REDIS_URL=redis://redis:6380
      - CHROMA_HOST=chroma
      - CHROMA_PORT=8001
      - NEO4J_URI=neo4j://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=testpassword
    depends_on:
      - redis
      - chroma
      - neo4j
    volumes:
      - ./backend:/app
    restart: unless-stopped
    networks:
      - agent-network

  frontend:
    build: ./frontend
    ports:
      - "8501:8501"
    environment:
      # üîß ÏàòÏ†ï: 8100 ‚Üí 8000ÏúºÎ°ú Î≥ÄÍ≤Ω (Ïª®ÌÖåÏù¥ÎÑà ÎÇ¥Î∂Ä Ìè¨Ìä∏ ÏÇ¨Ïö©)
      - BACKEND_URL=http://backend:8000
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
    restart: unless-stopped
    networks:
      - agent-network

  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - agent-network

  chroma:
    image: chromadb/chroma:latest
    ports:
      - "8001:8000"
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - agent-network

  neo4j:
    image: neo4j:5
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/testpassword
      - NEO4J_PLUGINS=["apoc"]
    volumes:
      - neo4j_data:/data
    networks:
      - agent-network

  # Î™®ÎãàÌÑ∞ÎßÅ ÏÑúÎπÑÏä§Îì§
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    networks:
      - agent-network
    restart: unless-stopped
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - agent-network
    restart: unless-stopped
    depends_on:
      - prometheus

  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - agent-network
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk:/dev/disk:ro
    networks:
      - agent-network
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg

  mcp-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp
    ports:
      - "3000:3000"
    volumes:
      - ./mcp_tools:/app/tools
      
  # mongodb:
  #   image: mongo:7
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     - mongodb_data:/data/db

volumes:
  redis_data:
  chroma_data:
  neo4j_data:
  prometheus_data:
  grafana_data:

networks:
  agent-network:
    driver: bridge