# services:
#   backend:
#     build:
#       context: .
#       dockerfile: backend/Dockerfile
#     ports:
#       - "8100:8000"
#     environment:
#       - OPENAI_API_KEY=${OPENAI_API_KEY}
#       - MEM0_API_KEY=${MEM0_API_KEY}
#       - REDIS_HOST=redis
#       - REDIS_PORT=6379
#       - CHROMA_HOST=chroma
#       - CHROMA_PORT=8000
#       - NEO4J_URI=bolt://neo4j:7687
#       - NEO4J_USER=neo4j
#       - NEO4J_PASSWORD=testpassword
#       - MCP_SERVER_URL=http://mcp-server:3000
#       - PYTHONPATH=/app
#     depends_on:
#       - redis
#       - chroma
#       - neo4j
#       - mcp-server
#     volumes:
#       - ./data/logs:/app/data/logs
#     restart: unless-stopped
#     networks:
#       - agent-network

services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "8100:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MEM0_API_KEY=${MEM0_API_KEY}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CHROMA_HOST=chroma
      - CHROMA_PORT=8000
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=testpassword
      - MCP_SERVER_URL=http://mcp-server:3000
      - PYTHONPATH=/app
    depends_on:
      - redis
      - chroma
      - neo4j
      - mcp-server
    volumes:
      - ./data/logs:/app/data/logs
    restart: unless-stopped
    networks:
      - agent-network

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "8501:8501"
    environment:
      - BACKEND_URL=http://backend:8000
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - agent-network

  mcp-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp
    ports:
      - "3000:3000"
    networks:
      - agent-network

  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - agent-network

  chroma:
    image: chromadb/chroma:latest
    ports:
      - "8001:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    networks:
      - agent-network

  neo4j:
    image: neo4j:5
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/testpassword
      - NEO4J_PLUGINS=["apoc"]
    volumes:
      - neo4j_data:/data
    networks:
      - agent-network

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - agent-network
    restart: unless-stopped
    depends_on:
      - backend

  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - agent-network
    restart: unless-stopped
    depends_on:
      - prometheus

  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - agent-network
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk:/dev/disk:ro
    networks:
      - agent-network
    restart: unless-stopped
    privileged: true

volumes:
  redis_data:
  chroma_data:
  neo4j_data:
  prometheus_data:
  grafana_data:

networks:
  agent-network:
    driver: bridge